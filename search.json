[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2020 Seth Caldwell  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. billionaiRe Copyright (C) 2020 Seth Caldwell This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Seth Caldwell. Author, maintainer. Alice Robson. Author. Nelly Biondi. Author. Elliott Messeiller. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Caldwell S, Robson , Biondi N, Messeiller E (2022). billionaiRe: Calculate Triple Billions. https://www..int/data/triple-billion-dashboard, https://www..int/publications/m/item/thirteenth-general-programme--work-(gpw13)-methods--impact-measurement, https://github.com/gpw13/billionaiRe.","code":"@Manual{,   title = {billionaiRe: Calculate the WHO Triple Billions},   author = {Seth Caldwell and Alice Robson and Nelly Biondi and Elliott Messeiller},   year = {2022},   note = {https://www.who.int/data/triple-billion-dashboard, https://www.who.int/publications/m/item/thirteenth-general-programme-of-work-(gpw13)-methods-for-impact-measurement, https://github.com/gpw13/billionaiRe}, }"},{"path":"/index.html","id":"billionaire-","dir":"","previous_headings":"","what":"Calculate the WHO Triple Billions","title":"Calculate the WHO Triple Billions","text":"goal billionaiRe provide easy interface using long format data calculate World Health Organization’s Triple Billions.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Calculate the WHO Triple Billions","text":"can install billionaiRe GitHub : need already installed wppdistro package, stored private repo made public upon request. Please contact kanjim@.int messeillere@.int request access.","code":"remotes::install_github(\"gpw13/billionaiRe\", build_vignettes = TRUE)"},{"path":"/index.html","id":"calculations","dir":"","previous_headings":"","what":"Calculations","title":"Calculate the WHO Triple Billions","text":"package built around set functions calculate Billions three Billions separately: Healthier Populations (HPOP) Health Emergencies Protection (HEP) Universal Health Coverage (UHC)","code":""},{"path":"/index.html","id":"hpop-billion-calculation","dir":"","previous_headings":"","what":"HPOP Billion calculation","title":"Calculate the WHO Triple Billions","text":"calculate HPOP Billion, series functions made available billionaiRe package: transform_hpop_data() transform raw values normalized values used within calculations. add_hpop_populations() get relevant population groups country indicator. calculate_hpop_contributions() calculate indicator level changes contributions Billion. calculate_hpop_billion() calculate indicator level changes, country-level Billion, adjusting double counting, contributions. Run sequence, can calculate entire HPOP Billion, can run separately produce different outputs required. Details inputs function available individual documentation, can see quick easy Billions calculation done using sample fake HPOP data provided package, hpop_df.","code":"library(billionaiRe)  hpop_df %>%   transform_hpop_data() %>%   add_hpop_populations() %>%   calculate_hpop_billion() %>%   dplyr::filter(stringr::str_detect(ind, \"hpop_healthier\")) #> # A tibble: 6 x 9 #>   iso3   year ind                  value transform_value population contribution #>   <chr> <dbl> <chr>                <dbl>           <dbl>      <dbl>        <dbl> #> 1 AFG    2023 hpop_healthier_plus     NA              NA   41681232    25608812. #> 2 AFG    2023 hpop_healthier_minus    NA              NA   41681232   -35897603. #> 3 AFG    2023 hpop_healthier          NA              NA   41681232   -10288791. #> 4 AFG    2023 hpop_healthier_plus~    NA              NA   41681232    30125312. #> 5 AFG    2023 hpop_healthier_minu~    NA              NA   41681232   -69269569. #> 6 AFG    2023 hpop_healthier_dbl_~    NA              NA   41681232   -39144257. #> # ... with 2 more variables: contribution_percent <dbl>, #> #   contribution_percent_total_pop <dbl>"},{"path":"/index.html","id":"uhc-billion-calculation","dir":"","previous_headings":"","what":"UHC Billion calculation","title":"Calculate the WHO Triple Billions","text":"calculate UHC Billion, series functions made available billionaiRe package: transform_uhc_data() transform raw values normalized values used within calculations. calculate_uhc_billion() calculate average service coverage, financial hardship, UHC single measure country year data frame.. calculate_uhc_contribution() calculate country-level Billion specified beginning end year. Run sequence, can calculate entire UHC Billion, can run separately produce different outputs required. Details inputs function available individual documentation, can see quick easy Billions calculation done using sample fake UHC data provided package, uhc_df.","code":"library(billionaiRe)  uhc_df %>%   transform_uhc_data() %>%   calculate_uhc_billion() %>%   calculate_uhc_contribution(end_year = 2023) %>%   dplyr::filter(ind %in% c(\"uhc_sm\", \"asc\", \"fh\"),                 year == 2023) #> # A tibble: 3 x 9 #>   iso3   year ind    value transform_value type      source         contribution #>   <chr> <dbl> <chr>  <dbl>           <dbl> <chr>     <chr>                 <dbl> #> 1 AFG    2023 fh      25.4            25.4 <NA>      <NA>               2963536. #> 2 AFG    2023 asc     45.6            45.6 projected WHO DDI calcu~     1607136. #> 3 AFG    2023 uhc_sm  34.0            34.0 projected WHO DDI calcu~      -38238. #> # ... with 1 more variable: contribution_percent <dbl>"},{"path":"/index.html","id":"hep-billion-calculation","dir":"","previous_headings":"","what":"HEP Billion calculation","title":"Calculate the WHO Triple Billions","text":"calculate HEP Billion, series functions made available billionaiRe package: transform_hep_data() transform raw values normalized values used within calculations. now, primarily calculating total prevent numerators denominators campaign routine data. calculate_hep_components() calculate component indicators (Prevent coverages), HEP index, levels components. calculate_hep_billion() calculate change three HEP components (DNR, Prepare, Prevent), contribution Billion, overall HEPI change contribution. Run sequence, can calculate entire HEP Billion, can run separately produce different outputs required. Details inputs function available individual documentation, can see quick easy Billions calculation done using sample fake HEP data provided package, hep_df.","code":"library(billionaiRe)  hep_df %>%   transform_hep_data() %>%   calculate_hep_components() %>%   calculate_hep_billion(end_year = 2023) %>%   dplyr::filter(ind %in% c(\"prevent\",                            \"espar\",                            \"detect_respond\",                            \"hep_idx\"),                 year == 2023) #> # A tibble: 4 x 10 #>   iso3   year ind            value type       source transform_value level contribution #>   <chr> <dbl> <chr>          <dbl> <chr>      <chr>            <dbl> <dbl>        <dbl> #> 1 AFG    2023 espar           51.2 Projection <NA>              51.2     3     4680802. #> 2 AFG    2023 detect_respond  91   Projection <NA>              91       5     2084062. #> 3 AFG    2023 prevent         NA   Projection WHO D~           100       5           0  #> 4 AFG    2023 hep_idx         NA   Projection WHO D~            80.7     4     6764864. #> # ... with 1 more variable: contribution_percent <dbl>"},{"path":"/reference/add_hpop_populations.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Population Figures for HPOP Billion — add_hpop_populations","title":"Add Population Figures for HPOP Billion — add_hpop_populations","text":"add_hpop_populations() adds relevant populations HPOP Billion indicator country, can used calculate indicator-level contributions HPOP Billion. column specified population generated filled relevant populations country indicator. column already exists, missing values replaced function.","code":""},{"path":"/reference/add_hpop_populations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Population Figures for HPOP Billion — add_hpop_populations","text":"","code":"add_hpop_populations(   df,   iso3 = \"iso3\",   ind = \"ind\",   population = \"population\",   pop_year = 2025,   ind_ids = billion_ind_codes(\"hpop\") )"},{"path":"/reference/add_hpop_populations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Population Figures for HPOP Billion — add_hpop_populations","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. iso3 Column name column country ISO3 codes. ind Column name column indicator names. population Column name column create population figures. pop_year Year used pull HPOP populations, defaults 2025. ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes().","code":""},{"path":"/reference/add_hpop_populations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Population Figures for HPOP Billion — add_hpop_populations","text":"Data frame long format.","code":""},{"path":"/reference/add_hpop_populations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Population Figures for HPOP Billion — add_hpop_populations","text":"details HPOP Billion calculation process function ties rest, see vignette: vignette(\"hpop\", package = \"billionaiRe\")","code":""},{"path":"/reference/add_missing_xmart_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Add missing rows for xMart upload — add_missing_xmart_rows","title":"Add missing rows for xMart upload — add_missing_xmart_rows","text":"Compares rows given data frame existing xMart data. data frame missing combinations c(iso3, ind, year) found xMart, appends rows data frame,NA values value, upper, lower, source, type other_detail.","code":""},{"path":"/reference/add_missing_xmart_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add missing rows for xMart upload — add_missing_xmart_rows","text":"","code":"add_missing_xmart_rows(df, billion, ind_code, projected)"},{"path":"/reference/add_missing_xmart_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add missing rows for xMart upload — add_missing_xmart_rows","text":"df data frame billion Billion indicator belongs ind_code GPW13 code indicator(s) projected boolean value indicating indicator already projected technical programme","code":""},{"path":"/reference/add_missing_xmart_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add missing rows for xMart upload — add_missing_xmart_rows","text":"data frame","code":""},{"path":"/reference/assert_arg_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that argument exists — assert_arg_exists","title":"Assert that argument exists — assert_arg_exists","text":"Check given argument exists NA NULL. Useful functions argument required rest code work.","code":""},{"path":"/reference/assert_arg_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that argument exists — assert_arg_exists","text":"","code":"assert_arg_exists(x)"},{"path":"/reference/assert_arg_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that argument exists — assert_arg_exists","text":"x argument check","code":""},{"path":"/reference/assert_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that columns exist in a data frame — assert_columns","title":"Assert that columns exist in a data frame — assert_columns","text":"Assert columns exist data frame","code":""},{"path":"/reference/assert_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that columns exist in a data frame — assert_columns","text":"","code":"assert_columns(df, ...)"},{"path":"/reference/assert_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that columns exist in a data frame — assert_columns","text":"df Data frame ... Column names","code":""},{"path":"/reference/assert_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that df is a data frame — assert_df","title":"Assert that df is a data frame — assert_df","text":"Assert df data frame","code":""},{"path":"/reference/assert_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that df is a data frame — assert_df","text":"","code":"assert_df(df)"},{"path":"/reference/assert_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that df is a data frame — assert_df","text":"df Supposed data frame","code":""},{"path":"/reference/assert_homogeneous_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that the data frame only has one value (is homogeneous) for a given column — assert_homogeneous_col","title":"Assert that the data frame only has one value (is homogeneous) for a given column — assert_homogeneous_col","text":"Assert data frame one value (homogeneous) given column","code":""},{"path":"/reference/assert_homogeneous_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that the data frame only has one value (is homogeneous) for a given column — assert_homogeneous_col","text":"","code":"assert_homogeneous_col(df, col_name)"},{"path":"/reference/assert_homogeneous_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that the data frame only has one value (is homogeneous) for a given column — assert_homogeneous_col","text":"df input data frame col_name string specifying column check","code":""},{"path":"/reference/assert_in_list_or_null.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that x is in list or is NULL — assert_in_list_or_null","title":"Assert that x is in list or is NULL — assert_in_list_or_null","text":"Assert x list NULL","code":""},{"path":"/reference/assert_in_list_or_null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that x is in list or is NULL — assert_in_list_or_null","text":"","code":"assert_in_list_or_null(x, list)"},{"path":"/reference/assert_in_list_or_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that x is in list or is NULL — assert_in_list_or_null","text":"x value checked list list values checked ","code":""},{"path":"/reference/assert_ind_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that ind_ids is the correct named vector — assert_ind_ids","title":"Assert that ind_ids is the correct named vector — assert_ind_ids","text":"Assert ind_ids correct named vector","code":""},{"path":"/reference/assert_ind_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that ind_ids is the correct named vector — assert_ind_ids","text":"","code":"assert_ind_ids(ind_ids, billion)"},{"path":"/reference/assert_ind_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that ind_ids is the correct named vector — assert_ind_ids","text":"ind_ids Indicator ids check billion Billion checking ","code":""},{"path":"/reference/assert_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that df is a list — assert_list","title":"Assert that df is a list — assert_list","text":"Assert df list","code":""},{"path":"/reference/assert_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that df is a list — assert_list","text":"","code":"assert_list(df)"},{"path":"/reference/assert_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that df is a list — assert_list","text":"df Supposed list","code":""},{"path":"/reference/assert_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that columns are numeric in a data frame — assert_numeric","title":"Assert that columns are numeric in a data frame — assert_numeric","text":"Assert columns numeric data frame","code":""},{"path":"/reference/assert_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that columns are numeric in a data frame — assert_numeric","text":"","code":"assert_numeric(df, ...)"},{"path":"/reference/assert_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that columns are numeric in a data frame — assert_numeric","text":"df Data frame ... Column names","code":""},{"path":"/reference/assert_same_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that two vectors are the same length — assert_same_length","title":"Assert that two vectors are the same length — assert_same_length","text":"Assert two vectors length","code":""},{"path":"/reference/assert_same_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that two vectors are the same length — assert_same_length","text":"","code":"assert_same_length(...)"},{"path":"/reference/assert_same_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that two vectors are the same length — assert_same_length","text":"... Arguments pass two vectors length.","code":""},{"path":"/reference/assert_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that x is a character vector of length n — assert_string","title":"Assert that x is a character vector of length n — assert_string","text":"Assert x character vector length n","code":""},{"path":"/reference/assert_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that x is a character vector of length n — assert_string","text":"","code":"assert_string(x, n)"},{"path":"/reference/assert_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that x is a character vector of length n — assert_string","text":"x Supposed string test n Length test","code":""},{"path":"/reference/assert_strings.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that arguments passed in are length 1 character vectors — assert_strings","title":"Assert that arguments passed in are length 1 character vectors — assert_strings","text":"Assert arguments passed length 1 character vectors","code":""},{"path":"/reference/assert_strings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that arguments passed in are length 1 character vectors — assert_strings","text":"","code":"assert_strings(...)"},{"path":"/reference/assert_strings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that arguments passed in are length 1 character vectors — assert_strings","text":"... Character vectors check","code":""},{"path":"/reference/assert_style_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that params are valid formal argument to openxlsx::createStyle() — assert_style_param","title":"Assert that params are valid formal argument to openxlsx::createStyle() — assert_style_param","text":"Assert params valid formal argument openxlsx::createStyle()","code":""},{"path":"/reference/assert_style_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that params are valid formal argument to openxlsx::createStyle() — assert_style_param","text":"","code":"assert_style_param(...)"},{"path":"/reference/assert_style_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that params are valid formal argument to openxlsx::createStyle() — assert_style_param","text":"... character vector parameters openxlsx::createStyle()","code":""},{"path":"/reference/assert_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that an object is of a given type — assert_type","title":"Assert that an object is of a given type — assert_type","text":"Assert object given type","code":""},{"path":"/reference/assert_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that an object is of a given type — assert_type","text":"","code":"assert_type(x, expected_type)"},{"path":"/reference/assert_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that an object is of a given type — assert_type","text":"x input object expected_type expected type x","code":""},{"path":"/reference/assert_unique_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert unique rows of df — assert_unique_rows","title":"Assert unique rows of df — assert_unique_rows","text":"Makes sure distinct rows ind, iso3, year, scenario used.","code":""},{"path":"/reference/assert_unique_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert unique rows of df — assert_unique_rows","text":"","code":"assert_unique_rows(df, ind, iso3, year, scenario = NULL, ind_ids)"},{"path":"/reference/assert_unique_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert unique rows of df — assert_unique_rows","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. ind Column name column indicator names. iso3 Column name column country ISO3 codes. year Column name column years. scenario Column name column scenario identifiers. Useful calculating contributions data long format rather wide format. ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes().","code":""},{"path":"/reference/assert_who_iso.html","id":null,"dir":"Reference","previous_headings":"","what":"Asserts that provided ISO is valid — assert_who_iso","title":"Asserts that provided ISO is valid — assert_who_iso","text":"Checks provided ISO code valid ISO3 code member state, using whoville::is_who_member().","code":""},{"path":"/reference/assert_who_iso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Asserts that provided ISO is valid — assert_who_iso","text":"","code":"assert_who_iso(iso)"},{"path":"/reference/assert_who_iso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Asserts that provided ISO is valid — assert_who_iso","text":"iso Single ISO3 code","code":""},{"path":"/reference/assert_years.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that end years are always later than start year — assert_years","title":"Assert that end years are always later than start year — assert_years","text":"Assert end years always later start year","code":""},{"path":"/reference/assert_years.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that end years are always later than start year — assert_years","text":"","code":"assert_years(start_year, end_year)"},{"path":"/reference/assert_years.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that end years are always later than start year — assert_years","text":"start_year Start year end_year End year(s)","code":""},{"path":"/reference/billion_group_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate average per Billion group — billion_group_mean","title":"Calculate average per Billion group — billion_group_mean","text":"Calculates average per Billion group, taking account number indicators available use calculation. returns NA (thus NA calculated ASC) indicator missing. exception insecticide treated nets missing.","code":""},{"path":"/reference/billion_group_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate average per Billion group — billion_group_mean","text":"","code":"billion_group_mean(ind, transform_value, ind_ids)"},{"path":"/reference/billion_group_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate average per Billion group — billion_group_mean","text":"ind Vector inds transform_value Vector transformed values ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes().","code":""},{"path":"/reference/billion_ind_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Indicator codes for the Billions — billion_ind_codes","title":"Indicator codes for the Billions — billion_ind_codes","text":"Provides analysis codes required input Triple Billion calculations. named vector returned function default names assumed data frame passed calculate Billions.","code":""},{"path":"/reference/billion_ind_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indicator codes for the Billions — billion_ind_codes","text":"","code":"billion_ind_codes(   billion = c(\"hep\", \"hpop\", \"uhc\"),   include_covariates = FALSE,   include_calculated = FALSE )"},{"path":"/reference/billion_ind_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indicator codes for the Billions — billion_ind_codes","text":"billion Billion indicator names return, either \"hep\", \"hpop\", \"uhc\". include_covariates Logical, whether include covariates getting Billions indicator codes. include_calculated Logical, whether include variables calculated within package getting Billion indicator codes. Useful UHC average service coverage.","code":""},{"path":"/reference/billion_ind_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indicator codes for the Billions — billion_ind_codes","text":"Character vector indicator names.","code":""},{"path":"/reference/billionaiRe_add_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Add columns to data frame if not already existing — billionaiRe_add_columns","title":"Add columns to data frame if not already existing — billionaiRe_add_columns","text":"function takes data frame, vector column names, vector base fill use column. column already exist, added data frame filled relevant fill value.","code":""},{"path":"/reference/billionaiRe_add_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add columns to data frame if not already existing — billionaiRe_add_columns","text":"","code":"billionaiRe_add_columns(df, cols, fill)"},{"path":"/reference/billionaiRe_add_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add columns to data frame if not already existing — billionaiRe_add_columns","text":"df data frame. cols character vector column names add. fill list fill used column. length 1, fill used column. Can also vector, lists allow different types fill, e.g. fill = list(NA_character_, NA_real_).","code":""},{"path":"/reference/billionaiRe_add_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add columns to data frame if not already existing — billionaiRe_add_columns","text":"data frame.","code":""},{"path":"/reference/calculate_contribution_sums.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate global/regional billions contributions — calculate_contribution_sums","title":"Calculate global/regional billions contributions — calculate_contribution_sums","text":"Calculates global regional sums billions contributions UHC, HPOP, HEP billions.","code":""},{"path":"/reference/calculate_contribution_sums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate global/regional billions contributions — calculate_contribution_sums","text":"","code":"calculate_contribution_sums(   df,   billion = c(\"uhc\", \"hpop\", \"hep\"),   sum_years,   sum_type = c(\"global\", \"regional\"),   source = sprintf(\"WHO DDI calculation, %s\", format(Sys.Date(), \"%B %Y\")),   scenario = \"scenario\",   year = \"year\",   iso3 = \"iso3\",   ind = \"ind\",   contribution = \"contribution\" )"},{"path":"/reference/calculate_contribution_sums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate global/regional billions contributions — calculate_contribution_sums","text":"df data frame billion One uhc, hpop, hep. billion want find global sums. sum_years year(s) want sum billions contributions. sum_type Allows select global regional sums. source source calculated billions. DDI calculations, month, year timestamp default. scenario Column name column scenario identifiers. Useful calculating contributions data long format rather wide format. year Column name column years. iso3 Column name column country ISO3 codes. ind Column name column indicator names. contribution Column name column(s) store contribution (population) values.","code":""},{"path":"/reference/calculate_contribution_sums.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate global/regional billions contributions — calculate_contribution_sums","text":"data frame global sums relevant billion. include rows original data frame.","code":""},{"path":"/reference/calculate_contribution_sums.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate global/regional billions contributions — calculate_contribution_sums","text":"full_data expected values billions calculations per country already computed. example, calculating global contributions HPOP billion 2025.","code":""},{"path":"/reference/calculate_hep_billion.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate HEP Billion — calculate_hep_billion","title":"Calculate HEP Billion — calculate_hep_billion","text":"calculate_hep_billion() calculates country-level HEP Billion based component indicators. calculates change Prevent Prepare start year end year, estimated change Detect Respond based level end year. data available end year Detect Respond, latest year observed data used. Details available methods report exact method applied.","code":""},{"path":"/reference/calculate_hep_billion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate HEP Billion — calculate_hep_billion","text":"","code":"calculate_hep_billion(   df,   iso3 = \"iso3\",   ind = \"ind\",   year = \"year\",   scenario = NULL,   transform_value = \"transform_value\",   level = stringr::str_replace(transform_value, \"transform_value\", \"level\"),   contribution = stringr::str_replace(transform_value, \"transform_value\",     \"contribution\"),   contribution_pct = paste0(contribution, \"_percent\"),   start_year = 2018,   end_year = 2019:2025,   pop_year = 2025,   ind_ids = billion_ind_codes(\"hep\", include_calculated = TRUE) )"},{"path":"/reference/calculate_hep_billion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate HEP Billion — calculate_hep_billion","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. iso3 Column name column country ISO3 codes. ind Column name column indicator names. year Column name column years. scenario Column name column scenario identifiers. Useful calculating contributions data long format rather wide format. transform_value Column name column(s) transformed indicator values, used calculate contributions. level Column name column(s) indicator levels. length transform_value. contribution Column name column(s) store contribution (population) values. Must length transform_value. contribution_pct Column name column(s) store contribution (percent) values. Must length transform_value. start_year Base year contribution calculation, defaults 2018. end_year End year(s) contribution calculation, defaults 2019 2025. pop_year Year used pull HPOP populations, defaults 2025. ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes().","code":""},{"path":"/reference/calculate_hep_billion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate HEP Billion — calculate_hep_billion","text":"Data frame long format.","code":""},{"path":"/reference/calculate_hep_billion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate HEP Billion — calculate_hep_billion","text":"details HEP Billion calculation process function ties rest, see vignette: vignette(\"hep\", package = \"billionaiRe\")","code":""},{"path":"/reference/calculate_hep_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate HEP component indicators — calculate_hep_components","title":"Calculate HEP component indicators — calculate_hep_components","text":"Currently, Prepare DNR indicators already calculated input data, Prevent calculated function. takes numerator denominator data inputs calculates vaccination coverage per year country relevant pathogen, well overall Prevent score. DNR components, level calculated function.","code":""},{"path":"/reference/calculate_hep_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate HEP component indicators — calculate_hep_components","text":"","code":"calculate_hep_components(   df,   iso3 = \"iso3\",   year = \"year\",   ind = \"ind\",   scenario = NULL,   transform_value = \"transform_value\",   type_col = \"type\",   source_col = \"source\",   source = sprintf(\"WHO DDI, %s\", format(Sys.Date(), \"%B %Y\")),   level = stringr::str_replace(transform_value, \"transform_value\", \"level\"),   hepi_start_year = 2018,   ind_ids = billion_ind_codes(\"hep\", include_calculated = TRUE) )"},{"path":"/reference/calculate_hep_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate HEP component indicators — calculate_hep_components","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. iso3 Column name column country ISO3 codes. year Column name column year data. ind Column name column indicator names. scenario Column name column scenario identifiers. Useful calculating contributions data long format rather wide format. transform_value Column name column(s) transformed indicator values, used calculate contributions. type_col Column name column type data. source_col Column name column store source information. source Source use unique source available calculation. level Column name(s) create hold levels data. length transform_value. hepi_start_year First year calculate HEP index . ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes().","code":""},{"path":"/reference/calculate_hep_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate HEP component indicators — calculate_hep_components","text":"Data frame long format.","code":""},{"path":"/reference/calculate_hepi.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate HEPI — calculate_hepi","title":"Calculate HEPI — calculate_hepi","text":"Function calculate HEPI average DNR, Prepare, Prevent. Used within calculate_hep_components().","code":""},{"path":"/reference/calculate_hepi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate HEPI — calculate_hepi","text":"","code":"calculate_hepi(   df,   iso3,   year,   scenario,   ind,   type_col,   source_col,   source,   transform_value,   earliest_year,   ind_ids )"},{"path":"/reference/calculate_hepi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate HEPI — calculate_hepi","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. iso3 Column name column country ISO3 codes. year Column name column year data. scenario Column name column scenario identifiers. Useful calculating contributions data long format rather wide format. ind Column name column indicator names. type_col Column name column type data. source_col Column name column store source information. source Source use unique source available calculation. transform_value Column name column(s) transformed indicator values, used calculate contributions. earliest_year Earliest year HEPI calculation. ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes().","code":""},{"path":"/reference/calculate_hpop_billion.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate HPOP Billion — calculate_hpop_billion","title":"Calculate HPOP Billion — calculate_hpop_billion","text":"calculate_hpop_billion() calculates country-level HPOP Billion based indicator level changes.","code":""},{"path":"/reference/calculate_hpop_billion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate HPOP Billion — calculate_hpop_billion","text":"","code":"calculate_hpop_billion(   df,   year = \"year\",   start_year = 2018,   end_year = 2019:2025,   iso3 = \"iso3\",   ind = \"ind\",   population = \"population\",   pop_year = 2025,   transform_value = \"transform_value\",   contribution = stringr::str_replace(transform_value, \"transform_value\",     \"contribution\"),   contribution_pct = paste0(contribution, \"_percent\"),   contribution_pct_total_pop = paste0(contribution, \"_percent_total_pop\"),   scenario = NULL,   ind_ids = billion_ind_codes(\"hpop\") )"},{"path":"/reference/calculate_hpop_billion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate HPOP Billion — calculate_hpop_billion","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. year Column name column years. start_year Base year contribution calculation, defaults 2018. end_year End year(s) contribution calculation, defaults 2019 2025. iso3 Column name column country ISO3 codes. ind Column name column indicator names. population Column name column population figures. pop_year Year used pull HPOP populations, defaults 2025. transform_value Column name column(s) transformed indicator values, used calculate contributions. contribution Column name column(s) store contribution (population) values. Must length transform_value. contribution_pct Column name column(s) store contribution (percent) values. Must length transform_value. contribution_pct_total_pop Column name column(s) store contribution (percent total population country) values. Must length transform_value. scenario Column name column scenario identifiers. Useful calculating contributions data long format rather wide format. ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes().","code":""},{"path":"/reference/calculate_hpop_billion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate HPOP Billion — calculate_hpop_billion","text":"Data frame long format.","code":""},{"path":"/reference/calculate_hpop_billion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate HPOP Billion — calculate_hpop_billion","text":"details HPOP Billion calculation process function ties rest, see vignette: vignette(\"hpop\", package = \"billionaiRe\")","code":""},{"path":"/reference/calculate_hpop_billion_change.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the HPOP Billion using columns of change — calculate_hpop_billion_change","title":"Calculate the HPOP Billion using columns of change — calculate_hpop_billion_change","text":"calculate_hpop_billion_change() uses standard HPOP methodology calculate Billions estimates end years. used within calculate_hpop_billion() calculate Billion return data long format. Called , expects column changes passed , returns Billion end_year values.","code":""},{"path":"/reference/calculate_hpop_billion_change.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the HPOP Billion using columns of change — calculate_hpop_billion_change","text":"","code":"calculate_hpop_billion_change(   df,   change = \"contribution_percent\",   contribution = \"contribution\",   ind = \"ind\",   iso3 = \"iso3\",   year = \"year\",   population = \"population\",   end_year = 2019:2025,   pop_year = 2025,   scenario = NULL,   ind_ids = billion_ind_codes(\"hpop\") )"},{"path":"/reference/calculate_hpop_billion_change.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the HPOP Billion using columns of change — calculate_hpop_billion_change","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. change Column name column(s) change value contribution Column name column(s) store contribution (population) values. Must length transform_value. ind Column name column indicator names. iso3 Column name column country ISO3 codes. year Column name column years. population Column name column population figures. end_year End year(s) contribution calculation, defaults 2019 2025. pop_year Year used pull HPOP populations, defaults 2025. scenario Column name column scenario identifiers. Useful calculating contributions data long format rather wide format. ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes().","code":""},{"path":"/reference/calculate_hpop_billion_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the HPOP Billion for one column of change — calculate_hpop_billion_single","title":"Calculate the HPOP Billion for one column of change — calculate_hpop_billion_single","text":"Calculate HPOP Billion one column change","code":""},{"path":"/reference/calculate_hpop_billion_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the HPOP Billion for one column of change — calculate_hpop_billion_single","text":"","code":"calculate_hpop_billion_single(   change,   contribution,   df,   iso3,   ind,   year,   pop_year,   scenario )"},{"path":"/reference/calculate_hpop_billion_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the HPOP Billion for one column of change — calculate_hpop_billion_single","text":"change Column name column change value contribution Column name column(s) store contribution (population) values. Must length transform_value. df Data frame long format, 1 row corresponds specific country, year, indicator. iso3 Column name column country ISO3 codes. ind Column name column indicator names. year Column name column years. pop_year Year used pull HPOP populations, defaults 2025. scenario Column name column scenario identifiers. Useful calculating contributions data long format rather wide format.","code":""},{"path":"/reference/calculate_hpop_change_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the change for vectors, used in calculate_hpop_billion() — calculate_hpop_change_vector","title":"Calculate the change for vectors, used in calculate_hpop_billion() — calculate_hpop_change_vector","text":"Calculate change vectors, used calculate_hpop_billion()","code":""},{"path":"/reference/calculate_hpop_change_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the change for vectors, used in calculate_hpop_billion() — calculate_hpop_change_vector","text":"","code":"calculate_hpop_change_vector(transform_value, year, start_year)"},{"path":"/reference/calculate_hpop_change_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the change for vectors, used in calculate_hpop_billion() — calculate_hpop_change_vector","text":"transform_value Vector transform values year Vector years start_year Start year","code":""},{"path":"/reference/calculate_hpop_contributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate HPOP Indicator Contributions — calculate_hpop_contributions","title":"Calculate HPOP Indicator Contributions — calculate_hpop_contributions","text":"calculate_hpop_contributions() calculates indicator-level contributions changes HPOP Billion.","code":""},{"path":"/reference/calculate_hpop_contributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate HPOP Indicator Contributions — calculate_hpop_contributions","text":"","code":"calculate_hpop_contributions(   df,   year = \"year\",   start_year = 2018,   end_year = 2019:2025,   iso3 = \"iso3\",   ind = \"ind\",   population = \"population\",   transform_value = \"transform_value\",   contribution = stringr::str_replace(transform_value, \"transform_value\",     \"contribution\"),   contribution_pct = paste0(contribution, \"_percent\"),   contribution_pct_total_pop = paste0(contribution, \"_percent_total_pop\"),   scenario = NULL,   ind_ids = billion_ind_codes(\"hpop\") )"},{"path":"/reference/calculate_hpop_contributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate HPOP Indicator Contributions — calculate_hpop_contributions","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. year Column name column years. start_year Base year contribution calculation, defaults 2018. end_year End year(s) contribution calculation, defaults 2019 2025. iso3 Column name column country ISO3 codes. ind Column name column indicator names. population Column name column population figures. transform_value Column name column(s) transformed indicator values, used calculate contributions. contribution Column name column(s) store contribution (population) values. Must length transform_value. contribution_pct Column name column(s) store contribution (percent) values. Must length transform_value. contribution_pct_total_pop Column name column(s) store contribution (percent total population country) values. Must length transform_value. scenario Column name column scenario identifiers. Useful calculating contributions data long format rather wide format. ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes().","code":""},{"path":"/reference/calculate_hpop_contributions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate HPOP Indicator Contributions — calculate_hpop_contributions","text":"Data frame long format.","code":""},{"path":"/reference/calculate_hpop_contributions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate HPOP Indicator Contributions — calculate_hpop_contributions","text":"details HPOP Billion calculation process function ties rest, see vignette: vignette(\"hpop\", package = \"billionaiRe\")","code":""},{"path":"/reference/calculate_uhc_billion.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate UHC Billion — calculate_uhc_billion","title":"Calculate UHC Billion — calculate_uhc_billion","text":"calculate_uhc_billion() calculates country-level UHC Billion based indicator level data. Calculates country-year combination provided data. order calculate average service coverage, thus overall Billion, UHC indicators must present given year. exception insecticide treated nets, need present.","code":""},{"path":"/reference/calculate_uhc_billion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate UHC Billion — calculate_uhc_billion","text":"","code":"calculate_uhc_billion(   df,   year = \"year\",   iso3 = \"iso3\",   ind = \"ind\",   transform_value = \"transform_value\",   value = \"value\",   scenario = NULL,   type_col = \"type\",   source_col = \"source\",   source = sprintf(\"WHO DDI calculation, %s\", format(Sys.Date(), \"%B %Y\")),   projected_year = 2020,   ind_ids = billion_ind_codes(\"uhc\") )"},{"path":"/reference/calculate_uhc_billion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate UHC Billion — calculate_uhc_billion","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. year Column name column years. iso3 Column name column country ISO3 codes. ind Column name column indicator names. transform_value Column name column(s) transformed indicator values, used calculate contributions. value Column name column indicator values. scenario Column name column scenario identifiers. Useful calculating contributions data long format rather wide format. type_col Column name column store type. source_col Column name column store source information. source Source provide calculated average service coverage single measure. projected_year Year calculated data regarded projected. Years prior reported estimated. ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes().","code":""},{"path":"/reference/calculate_uhc_billion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate UHC Billion — calculate_uhc_billion","text":"Data frame long format.","code":""},{"path":"/reference/calculate_uhc_billion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate UHC Billion — calculate_uhc_billion","text":"details UHC Billion calculation process function ties rest, see vignette: vignette(\"uhc\", package = \"billionaiRe\")","code":""},{"path":"/reference/calculate_uhc_billion_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate UHC Billion for one set of columns — calculate_uhc_billion_single","title":"Calculate UHC Billion for one set of columns — calculate_uhc_billion_single","text":"Calculate UHC Billion one set columns","code":""},{"path":"/reference/calculate_uhc_billion_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate UHC Billion for one set of columns — calculate_uhc_billion_single","text":"","code":"calculate_uhc_billion_single(   df,   year,   iso3,   ind,   transform_value,   value,   scenario,   source_col,   source,   type_col,   projected_year,   ind_ids )"},{"path":"/reference/calculate_uhc_billion_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate UHC Billion for one set of columns — calculate_uhc_billion_single","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. year Column name column years. iso3 Column name column country ISO3 codes. ind Column name column indicator names. transform_value Column name column(s) transformed indicator values, used calculate contributions. value Column name column indicator values. scenario Column name column scenario identifiers. Useful calculating contributions data long format rather wide format. source_col Column name column store source information. source Source provide calculated average service coverage single measure. type_col Column name column store type. projected_year Year calculated data regarded projected. Years prior reported estimated. ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes().","code":""},{"path":"/reference/calculate_uhc_contribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate UHC contribution — calculate_uhc_contribution","title":"Calculate UHC contribution — calculate_uhc_contribution","text":"calculate_uhc_contribution() calculates country-level UHC contributions, total population percents, based indicator level data. Calculates country-year combination provided data, specific scenarios specified.","code":""},{"path":"/reference/calculate_uhc_contribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate UHC contribution — calculate_uhc_contribution","text":"","code":"calculate_uhc_contribution(   df,   year = \"year\",   iso3 = \"iso3\",   ind = \"ind\",   start_year = 2018,   end_year = 2019:2025,   pop_year = 2025,   transform_value = \"transform_value\",   contribution = stringr::str_replace(transform_value, \"transform_value\",     \"contribution\"),   contribution_pct = paste0(contribution, \"_percent\"),   scenario = NULL,   ind_ids = billion_ind_codes(\"uhc\", include_calculated = TRUE) )"},{"path":"/reference/calculate_uhc_contribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate UHC contribution — calculate_uhc_contribution","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. year Column name column years. iso3 Column name column country ISO3 codes. ind Column name column indicator names. start_year Base year contribution calculation, defaults 2018. end_year End year(s) contribution calculation, defaults 2019 2025. pop_year Year used pull HPOP populations, defaults 2025. transform_value Column name column(s) transformed indicator values, used calculate contributions. contribution Column name column(s) store contribution (population) values. Must length transform_value. contribution_pct Column name column(s) store contribution (percent) values. Must length transform_value. scenario Column name column scenario identifiers. Useful calculating contributions data long format rather wide format. ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes().","code":""},{"path":"/reference/calculate_uhc_contribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate UHC contribution — calculate_uhc_contribution","text":"Data frame long format.","code":""},{"path":"/reference/calculate_uhc_contribution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate UHC contribution — calculate_uhc_contribution","text":"details UHC Billion calculation process function ties rest, see vignette: vignette(\"uhc\", package = \"billionaiRe\")","code":""},{"path":"/reference/convert_ind_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert indicator codes between types — convert_ind_codes","title":"Convert indicator codes between types — convert_ind_codes","text":"convert_ind_codes() allows easy conversion indicator codes dashboard IDs, xMart IDs, GHO codes.","code":""},{"path":"/reference/convert_ind_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert indicator codes between types — convert_ind_codes","text":"","code":"convert_ind_codes(   ind_codes,   from = c(\"dashboard_id\", \"ind\", \"gho_code\"),   to = c(\"dashboard_id\", \"ind\", \"gho_code\") )"},{"path":"/reference/convert_ind_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert indicator codes between types — convert_ind_codes","text":"ind_codes Character vector indicator codes Type code passed convert_ind_codes(). Type code return.","code":""},{"path":"/reference/convert_ind_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert indicator codes between types — convert_ind_codes","text":"character vector.","code":""},{"path":"/reference/country_shares.html","id":null,"dir":"Reference","previous_headings":"","what":"Country shares data — country_shares","title":"Country shares data — country_shares","text":"Country shares data UHC HPOP Billions 194 member states.","code":""},{"path":"/reference/country_shares.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Country shares data — country_shares","text":"","code":"country_shares"},{"path":"/reference/country_shares.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Country shares data — country_shares","text":"data frame 582 rows 4 variables: iso3 Country ISO3 codes. billion Relevant billion share_n Share, number people. share_perc Share, percent total projected population 2023.","code":""},{"path":"/reference/extrapolate_campaign_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Extrapolate campaign data for the transform value, type, and source — extrapolate_campaign_data","title":"Extrapolate campaign data for the transform value, type, and source — extrapolate_campaign_data","text":"Works across multiple transform_value columns.","code":""},{"path":"/reference/extrapolate_campaign_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extrapolate campaign data for the transform value, type, and source — extrapolate_campaign_data","text":"","code":"extrapolate_campaign_data(   pathogen,   pathogen_year,   df,   ind,   year,   transform_value,   source )"},{"path":"/reference/extrapolate_campaign_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extrapolate campaign data for the transform value, type, and source — extrapolate_campaign_data","text":"pathogen Indicator IDs pathogens pathogen_year Latest year data use flat extrapolation (extrapolating year) df Data frame long format, 1 row corresponds specific country, year, indicator. ind Column name column indicator names. year Column name column year data. transform_value Column name column(s) transformed indicator values, used calculate contributions. source Source use unique source available calculation.","code":""},{"path":"/reference/extrapolate_campaign_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling sum and extrapolate campaigns data — extrapolate_campaign_vector","title":"Rolling sum and extrapolate campaigns data — extrapolate_campaign_vector","text":"Takes rolling sum observed data flat extrapolates last reported","code":""},{"path":"/reference/extrapolate_campaign_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rolling sum and extrapolate campaigns data — extrapolate_campaign_vector","text":"","code":"extrapolate_campaign_vector(x, n)"},{"path":"/reference/extrapolate_campaign_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling sum and extrapolate campaigns data — extrapolate_campaign_vector","text":"x Vector campaigns data, either numerator denominator n Years take rolling average ","code":""},{"path":"/reference/generate_hpop_populations.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate HPOP Population Table — generate_hpop_populations","title":"Generate HPOP Population Table — generate_hpop_populations","text":"generate_hpop_populations() creates country/population data frame necessary correcting double counting within HPOP Billion calculation. used within calculate_hpop_billion().","code":""},{"path":"/reference/generate_hpop_populations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate HPOP Population Table — generate_hpop_populations","text":"","code":"generate_hpop_populations(pop_year)"},{"path":"/reference/generate_hpop_populations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate HPOP Population Table — generate_hpop_populations","text":"pop_year Year used pull HPOP populations, defaults 2025.","code":""},{"path":"/reference/generate_hpop_populations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate HPOP Population Table — generate_hpop_populations","text":"Data frame long format.","code":""},{"path":"/reference/generate_hpop_populations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate HPOP Population Table — generate_hpop_populations","text":"underlying data wppdistro package publicly distributed specific small member states, exported already created (thus publicly available) table within billionaiRe package, instead dynamically generated R session.","code":""},{"path":"/reference/get_country_shares.html","id":null,"dir":"Reference","previous_headings":"","what":"Get country shares data — get_country_shares","title":"Get country shares data — get_country_shares","text":"Matches country ISO3 codes data country_shares data frame.","code":""},{"path":"/reference/get_country_shares.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get country shares data — get_country_shares","text":"","code":"get_country_shares(   iso3,   billion = c(\"hep\", \"hpop\", \"uhc\"),   share_type = c(\"n\", \"perc\") )"},{"path":"/reference/get_country_shares.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get country shares data — get_country_shares","text":"iso3 Country ISO3 codes. billion Relevant Billion, one \"hep\", \"hpop\", \"uhc\". share_type Type share return, either total numbers people (\"n\"), percent total projected population 2023 (\"perc\").","code":""},{"path":"/reference/get_ind_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metadata for a Triple Billions indicator(s) — get_ind_metadata","title":"Get metadata for a Triple Billions indicator(s) — get_ind_metadata","text":"convenience function looks relevant metadata one indicators indicator_df table.","code":""},{"path":"/reference/get_ind_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metadata for a Triple Billions indicator(s) — get_ind_metadata","text":"","code":"get_ind_metadata(ind_codes, metadata_col = names(billionaiRe::indicator_df))"},{"path":"/reference/get_ind_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metadata for a Triple Billions indicator(s) — get_ind_metadata","text":"ind_codes character vector indicator (analysis) codes metadata_col name indicator_df column desired metadata. Must One \"dashboard_id\", \"ind\", \"gho_code\", \"ind_type\", \"uhc\", \"hpop\", \"hep\",\"covariate\", \"calculated\"","code":""},{"path":"/reference/get_ind_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get metadata for a Triple Billions indicator(s) — get_ind_metadata","text":"character vector metadata. positions correspond order ind_codes input.","code":""},{"path":"/reference/get_ind_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get metadata for a Triple Billions indicator(s) — get_ind_metadata","text":"","code":"# Find the gho_code for UHC Tobacco get_ind_metadata(\"uhc_tobacco\", \"gho_code\") #> [1] \"SDGTOBACCO\"  # Find the indicator type for multiple indicators get_ind_metadata(c(\"alcohol\", \"hwf\"), \"ind_type\") #> [1] \"unproj_data\" \"proj_data\""},{"path":"/reference/get_sdi_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Get SDI ratio data — get_sdi_ratio","title":"Get SDI ratio data — get_sdi_ratio","text":"Matches country ISO3 codes data sdi_ratio data frame.","code":""},{"path":"/reference/get_sdi_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get SDI ratio data — get_sdi_ratio","text":"","code":"get_sdi_ratio(iso3)"},{"path":"/reference/get_sdi_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get SDI ratio data — get_sdi_ratio","text":"iso3 Country ISO3 codes.","code":""},{"path":"/reference/get_sdi_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get SDI ratio data — get_sdi_ratio","text":"Numeric vector SDI ratios.","code":""},{"path":"/reference/has_xmart_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Check data frame for xMart4 columns — has_xmart_cols","title":"Check data frame for xMart4 columns — has_xmart_cols","text":"Tests see given data frame columns required Triple Billions xMart4 tables.test take column order consideration (e.g., ,b,c c,,b pass)","code":""},{"path":"/reference/has_xmart_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check data frame for xMart4 columns — has_xmart_cols","text":"","code":"has_xmart_cols(df)"},{"path":"/reference/has_xmart_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check data frame for xMart4 columns — has_xmart_cols","text":"df data.frame","code":""},{"path":"/reference/has_xmart_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check data frame for xMart4 columns — has_xmart_cols","text":"bool","code":""},{"path":"/reference/hep_df.html","id":null,"dir":"Reference","previous_headings":"","what":"HEP generated example data — hep_df","title":"HEP generated example data — hep_df","text":"Generated (fake) HEP data used test Billions calculations code within billionaiRe package.","code":""},{"path":"/reference/hep_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HEP generated example data — hep_df","text":"","code":"hep_df"},{"path":"/reference/hep_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"HEP generated example data — hep_df","text":"data frame 21 rows 5 variables: iso3 Country ISO3 codes. year Year. ind HPOP indicator code. value Raw indicator value. type Data type.","code":""},{"path":"/reference/hep_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HEP generated example data — hep_df","text":"See HEP vignette example use: vignette(\"hep\", package = \"billionaiRe\")","code":""},{"path":"/reference/hpop_df.html","id":null,"dir":"Reference","previous_headings":"","what":"HPOP generated example data — hpop_df","title":"HPOP generated example data — hpop_df","text":"Generated (fake) HPOP data used test Billions calculations code within billionaiRe package.","code":""},{"path":"/reference/hpop_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HPOP generated example data — hpop_df","text":"","code":"hpop_df"},{"path":"/reference/hpop_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"HPOP generated example data — hpop_df","text":"data frame 34 rows 5 variables: iso3 Country ISO3 codes. year Year. ind HPOP indicator code. value Raw indicator value. type Data type.","code":""},{"path":"/reference/hpop_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HPOP generated example data — hpop_df","text":"See HPOP vignette example use: vignette(\"hpop\", package = \"billionaiRe\")","code":""},{"path":"/reference/indicator_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset of indicators used within the Billions calculations. — indicator_df","title":"Dataset of indicators used within the Billions calculations. — indicator_df","text":"dataset containing dashboard analysis indicator codes uses within GPW13 Billions.","code":""},{"path":"/reference/indicator_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset of indicators used within the Billions calculations. — indicator_df","text":"","code":"indicator_df"},{"path":"/reference/indicator_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dataset of indicators used within the Billions calculations. — indicator_df","text":"data frame 111 rows 17 variables: dashboard_id Dashboard ID used within GPW13 xMart4 instance ind Code used analysis scripts within billionaiRe package gho_code GHO storage code indicator ind_type \"proj_data\" indicator projected technical programme, \"unproj_data\" projected DDI uhc Logical, UHC Billions indicator hpop Logical, HPOP Billions indicator hep Logical, HEP Billions indicator covariate Logical, indicator just covariate Billions calculated Logical, indicator calculated within package thus input sdg Indicator code SDG attributed SDG short_name Short name indicator unit_raw Unit raw values indicator unit_transformed Unit raw values indicator medium_name Medium length name indicator (typically used tables) transformed_name Name indicator transformation order Order indicators pillar Pillar indicators sits UHC HEP (e.g. Prevent, Non communicable diseases (NCDs), etc.)","code":""},{"path":"/reference/load_billion_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Raw Billions Indicator Data — load_billion_data","title":"Load Raw Billions Indicator Data — load_billion_data","text":"load_billion_data() provides access raw inputs Billions stored within World Health Organization's xMart4 database. default, filters loaded data take recently uploaded data indicator, country, year. user can also specify take latest data certain time period, extract data database.","code":""},{"path":"/reference/load_billion_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Raw Billions Indicator Data — load_billion_data","text":"","code":"load_billion_data(   billion = c(\"hep\", \"hpop\", \"uhc\", \"all\"),   mart_table = c(\"full_data\", \"raw_data\", \"projected_data\", \"unproj_data\", \"proj_data\"),   date_filter = \"latest\",   na_rm = TRUE,   format = c(\"csv\", \"streaming\", \"none\"),   ... )"},{"path":"/reference/load_billion_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Raw Billions Indicator Data — load_billion_data","text":"billion Billions data load, one \"hep\" (default), \"hpop\", \"uhc\", \"\". mart_table Name xMart4 table GPW13 mart load data . full_data: Full Billions data transformed values, contributions, calculations available. (default) raw_data: Raw input Billions data, yet transformed calculated upon, fully projected. Includes full history. projected_data: copy raw_data latest data. proj_data: Raw input Billions data projected technical programme(s). unproj_data: Raw input Billions projected technical programme(s) needs projection DDI. date_filter One NULL, \"latest\", single date string. date string needs ISO6801 format, \"1989-4-4\" \"1988-06-21\". date provided, take values loaded prior date xMart4 database. na_rm Logical value, specifying whether filter data rows value missing. Defaults TRUE. format Specification output format returned xMart API. Defaults \"csv\" faster download processing times. Passed xmart4::xmart4_table(). See xMart4 API documentation details three options (\"csv\", \"streaming\", \"none\"). ... Additional arguments passed xmart4::xmart4_table(). Use need provide additional token specifications Azure authentication.","code":""},{"path":"/reference/load_billion_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Raw Billions Indicator Data — load_billion_data","text":"data frame.","code":""},{"path":"/reference/load_billion_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load Raw Billions Indicator Data — load_billion_data","text":"function requires user xmart4 package installed setup access GPW13 mart. Details available GitHub landing page linked .","code":""},{"path":"/reference/load_misc_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load miscellaneous data — load_misc_data","title":"Load miscellaneous data — load_misc_data","text":"function fetches read data stored 3B/Bronze/misc/ folder WHDH data lake.","code":""},{"path":"/reference/load_misc_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load miscellaneous data — load_misc_data","text":"","code":"load_misc_data(file_name, ...)"},{"path":"/reference/load_misc_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load miscellaneous data — load_misc_data","text":"file_name name file. File names must end extension (e.g., .csv) ... additionally arguments pass appropriate read_ function.","code":""},{"path":"/reference/load_misc_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load miscellaneous data — load_misc_data","text":"data frame","code":""},{"path":"/reference/load_misc_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load miscellaneous data — load_misc_data","text":"automatically selects readr::read_csv(), arrow::read_parquet(), readxl::read_excel() based file extension.","code":""},{"path":"/reference/pathogen_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the vaccine coverage for a specific pathogen — pathogen_calc","title":"Calculate the vaccine coverage for a specific pathogen — pathogen_calc","text":"Using numerators denominators pre-supplied ISO3 year, overall vaccine coverage pathogen calculated. function currently counts number routine vaccinations included numerator, multiplies surviving infants denominator number.","code":""},{"path":"/reference/pathogen_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the vaccine coverage for a specific pathogen — pathogen_calc","text":"","code":"pathogen_calc(   df,   name,   ind,   iso3,   year,   numerators,   denominators,   transform_value,   type_col,   source_col,   source,   ind_ids,   multiply_surviving_infs,   max_value )"},{"path":"/reference/pathogen_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the vaccine coverage for a specific pathogen — pathogen_calc","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. name Name pathogen provide data frame. ind Column name column indicator names. iso3 Column name column country ISO3 codes. year Column name column year data. numerators Indicator names numerators. denominators Indicator names denominators. transform_value Column name column(s) transformed indicator values, used calculate contributions. type_col Column name column type data. source_col Column name column store source information. source Source use unique source available calculation. ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes(). multiply_surviving_infs Logical, multiple surviving infant population number routine vaccines numerator. max_value Maximum value calculated pathogen value can take.","code":""},{"path":"/reference/pathogen_calc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the vaccine coverage for a specific pathogen — pathogen_calc","text":"function currently called prevent_calculations() function sits within calculate_hep_components().","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pop_links.html","id":null,"dir":"Reference","previous_headings":"","what":"HPOP Billion population links — pop_links","title":"HPOP Billion population links — pop_links","text":"dataset linking HPOP Billion indicator relevant population groups used double counting correction. Used within generate_hpop_populations().","code":""},{"path":"/reference/pop_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HPOP Billion population links — pop_links","text":"","code":"pop_links"},{"path":"/reference/pop_links.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"HPOP Billion population links — pop_links","text":"data frame 254 rows 2 variables: ind HPOP indicator code. pop_group Population group.","code":""},{"path":"/reference/prevent_calculations.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate prevent indicators — prevent_calculations","title":"Calculate prevent indicators — prevent_calculations","text":"function calculates overall vaccine coverage scores pathogen, including overall prevent indicator. used within calculate_hep_components() primarily relies using purrr::pmap_dfr() apply pathogen_calc() function prevent component overall score.","code":""},{"path":"/reference/prevent_calculations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate prevent indicators — prevent_calculations","text":"","code":"prevent_calculations(   df,   iso3,   year,   scenario,   ind,   type_col,   source_col,   source,   transform_value,   ind_ids )"},{"path":"/reference/prevent_calculations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate prevent indicators — prevent_calculations","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. iso3 Column name column country ISO3 codes. year Column name column year data. scenario Column name column scenario identifiers. Useful calculating contributions data long format rather wide format. ind Column name column indicator names. type_col Column name column type data. source_col Column name column store source information. source Source use unique source available calculation. transform_value Column name column(s) transformed indicator values, used calculate contributions. ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes().","code":""},{"path":"/reference/reduce_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to reduce type to unique value — reduce_type","title":"Helper to reduce type to unique value — reduce_type","text":"Used pathogen_calc()","code":""},{"path":"/reference/reduce_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to reduce type to unique value — reduce_type","text":"","code":"reduce_type(value, type)"},{"path":"/reference/reduce_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to reduce type to unique value — reduce_type","text":"value Vector values type Vector types","code":""},{"path":"/reference/reverse_ind.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse indicator value — reverse_ind","title":"Reverse indicator value — reverse_ind","text":"Typically reversed maximum 100","code":""},{"path":"/reference/reverse_ind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse indicator value — reverse_ind","text":"","code":"reverse_ind(x, lim = 100)"},{"path":"/reference/reverse_ind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse indicator value — reverse_ind","text":"x Indicator value. lim Value reverse , defaults 100.","code":""},{"path":"/reference/save_wrangled_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Save the output to disk after ensuring column specs — save_wrangled_output","title":"Save the output to disk after ensuring column specs — save_wrangled_output","text":"Helper functions saves wrangled output data frame disk correct columns required Triple Billions xMart tables.","code":""},{"path":"/reference/save_wrangled_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save the output to disk after ensuring column specs — save_wrangled_output","text":"","code":"save_wrangled_output(df, path)"},{"path":"/reference/save_wrangled_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save the output to disk after ensuring column specs — save_wrangled_output","text":"df data frame output path path output saved","code":""},{"path":"/reference/save_wrangled_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save the output to disk after ensuring column specs — save_wrangled_output","text":"data frame. modified dataframe saved disk data frame columns expected xMart. Otherwise, simply return input data frame.","code":""},{"path":"/reference/save_wrangled_output.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save the output to disk after ensuring column specs — save_wrangled_output","text":"function returns data frame (like readr::write_csv()) order allow work pipes better.","code":""},{"path":"/reference/sdi_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Socio-Demographic Index data — sdi_ratio","title":"Socio-Demographic Index data — sdi_ratio","text":"Used internally transform road safety data HPOP Billion. Exact methods available methods report.","code":""},{"path":"/reference/sdi_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Socio-Demographic Index data — sdi_ratio","text":"","code":"sdi_ratio"},{"path":"/reference/sdi_ratio.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Socio-Demographic Index data — sdi_ratio","text":"data frame 194 rows 2 variables: iso3 Country ISO3 codes. sdiratio SDI ratio.","code":""},{"path":"/reference/transform_alcohol.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform alcohol data — transform_alcohol","title":"Transform alcohol data — transform_alcohol","text":"Rescales alcohol data according Billions methods report","code":""},{"path":"/reference/transform_alcohol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform alcohol data — transform_alcohol","text":"","code":"transform_alcohol(x)"},{"path":"/reference/transform_alcohol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform alcohol data — transform_alcohol","text":"x Indicator value.","code":""},{"path":"/reference/transform_bp.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform blood pressure data — transform_bp","title":"Transform blood pressure data — transform_bp","text":"Reverses indicator rescales [50,100] [0,100]","code":""},{"path":"/reference/transform_bp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform blood pressure data — transform_bp","text":"","code":"transform_bp(x)"},{"path":"/reference/transform_bp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform blood pressure data — transform_bp","text":"x Indicator value.","code":""},{"path":"/reference/transform_glucose.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform FPG data — transform_glucose","title":"Transform FPG data — transform_glucose","text":"Rescales FPG data [7.4,5.1] [0,100]","code":""},{"path":"/reference/transform_glucose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform FPG data — transform_glucose","text":"","code":"transform_glucose(x)"},{"path":"/reference/transform_glucose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform FPG data — transform_glucose","text":"x Indicator value.","code":""},{"path":"/reference/transform_hep_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Raw Indicator Values for HEP Billion — transform_hep_data","title":"Transform Raw Indicator Values for HEP Billion — transform_hep_data","text":"transform_hep_data() applies transformations HEP Billion indicators transformed indicator values can used within Billions calculations. Details specific transformations applied can found within Billions methods report.","code":""},{"path":"/reference/transform_hep_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Raw Indicator Values for HEP Billion — transform_hep_data","text":"","code":"transform_hep_data(   df,   iso3 = \"iso3\",   year = \"year\",   ind = \"ind\",   scenario = NULL,   value = \"value\",   transform_glue = \"transform_{value}\",   type_col = \"type\",   source_col = \"source\",   source = \"WUENIC/IVB/WHO Technical Programme\",   ind_ids = billion_ind_codes(\"hep\", include_calculated = TRUE),   extrapolate_to = 2025 )"},{"path":"/reference/transform_hep_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Raw Indicator Values for HEP Billion — transform_hep_data","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. iso3 Column name column country ISO3 codes. year Column name column year data. ind Column name column indicator names. scenario Column name column scenario identifiers. Useful calculating contributions data long format rather wide format. value Column name column indicator values. transform_glue Glue expression passed glue::glue(). Defaults 'transform_{value}' create new column names prefixing transform_ original name. type_col Column name column type data. source_col Column name column store source information. source Source use prevent data flat extrapolated one unique value. ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes(). extrapolate_to Year extrapolate Prevent data , defaults 2025","code":""},{"path":"/reference/transform_hep_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Raw Indicator Values for HEP Billion — transform_hep_data","text":"Data frame long format.","code":""},{"path":"/reference/transform_hep_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform Raw Indicator Values for HEP Billion — transform_hep_data","text":"Currently, function changes Prevent campaign data calculating total sum campaigns year use Prevent calculations. details HEP Billion calculation process function ties rest, see vignette: vignette(\"hep\", package = \"billionaiRe\")","code":""},{"path":"/reference/transform_hosp_beds.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform hospital beds data — transform_hosp_beds","title":"Transform hospital beds data — transform_hosp_beds","text":"Rescales hospital beds according Billions methods report","code":""},{"path":"/reference/transform_hosp_beds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform hospital beds data — transform_hosp_beds","text":"","code":"transform_hosp_beds(x)"},{"path":"/reference/transform_hosp_beds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform hospital beds data — transform_hosp_beds","text":"x Indicator value.","code":""},{"path":"/reference/transform_hpop_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Raw Indicator Values for HPOP Billion — transform_hpop_data","title":"Transform Raw Indicator Values for HPOP Billion — transform_hpop_data","text":"transform_hpop_data() applies transformations HPOP Billion indicators transformed indicator values can used within Billions calculations. Details specific transformations applied can found within Billions methods report. Values transform column, already exists, replaced HPOP indicators data value column, otherwise column keeps original data.","code":""},{"path":"/reference/transform_hpop_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Raw Indicator Values for HPOP Billion — transform_hpop_data","text":"","code":"transform_hpop_data(   df,   iso3 = \"iso3\",   ind = \"ind\",   value = \"value\",   transform_glue = \"transform_{value}\",   ind_ids = billion_ind_codes(\"hpop\") )"},{"path":"/reference/transform_hpop_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Raw Indicator Values for HPOP Billion — transform_hpop_data","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. iso3 Column name column country ISO3 codes. ind Column name column indicator names. value Column name column indicator values. transform_glue Glue expression passed glue::glue(). Defaults 'transform_{value}' create new column names prefixing transform_ original name. ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes().","code":""},{"path":"/reference/transform_hpop_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Raw Indicator Values for HPOP Billion — transform_hpop_data","text":"Data frame long format.","code":""},{"path":"/reference/transform_hpop_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform Raw Indicator Values for HPOP Billion — transform_hpop_data","text":"details HPOP Billion calculation process function ties rest, see vignette: vignette(\"hpop\", package = \"billionaiRe\")","code":""},{"path":"/reference/transform_hpop_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a transformation on a single column — transform_hpop_single","title":"Perform a transformation on a single column — transform_hpop_single","text":"function used within transform_hpop_data() generate transformed data single column.","code":""},{"path":"/reference/transform_hpop_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a transformation on a single column — transform_hpop_single","text":"","code":"transform_hpop_single(df, iso3, ind, value, transform_col, ind_ids)"},{"path":"/reference/transform_hpop_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a transformation on a single column — transform_hpop_single","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. iso3 Column name column country ISO3 codes. ind Column name column indicator names. value Column name column indicator values. transform_col Column put transformed values ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes().","code":""},{"path":"/reference/transform_hpop_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a transformation on a single column — transform_hpop_single","text":"single column data frame transformed values.","code":""},{"path":"/reference/transform_hwf.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform health workforce data — transform_hwf","title":"Transform health workforce data — transform_hwf","text":"Rescales healh workforce data  according Billions methods report","code":""},{"path":"/reference/transform_hwf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform health workforce data — transform_hwf","text":"","code":"transform_hwf(x)"},{"path":"/reference/transform_hwf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform health workforce data — transform_hwf","text":"x Indicator value.","code":""},{"path":"/reference/transform_inversion.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse indicator and cap — transform_inversion","title":"Reverse indicator and cap — transform_inversion","text":"Reverse indicator capbetween 0 100","code":""},{"path":"/reference/transform_inversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse indicator and cap — transform_inversion","text":"","code":"transform_inversion(x)"},{"path":"/reference/transform_inversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse indicator and cap — transform_inversion","text":"x Indicator value.","code":""},{"path":"/reference/transform_prev_cmpgn_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Prevent campaigns data — transform_prev_cmpgn_data","title":"Transform Prevent campaigns data — transform_prev_cmpgn_data","text":"Prevent campaign data uses aggregates across years vaccine provides protection specific pathogen. Thus, want specific aggregation analysis can brought overall HEP calculations. function just . pathogen, take data latest year observed, separate year provided. rolling sums , ensure rows make sense (filtering instance years pathogens reported country).","code":""},{"path":"/reference/transform_prev_cmpgn_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Prevent campaigns data — transform_prev_cmpgn_data","text":"","code":"transform_prev_cmpgn_data(   df,   iso3,   year,   ind,   scenario,   value,   transform_value,   type_col,   source_col,   source,   ind_ids,   extrapolate_to )"},{"path":"/reference/transform_prev_cmpgn_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Prevent campaigns data — transform_prev_cmpgn_data","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. iso3 Column name column country ISO3 codes. year Column name column year data. ind Column name column indicator names. scenario Column name column scenario identifiers. Useful calculating contributions data long format rather wide format. value Column name column indicator values. transform_value Column name column(s) transformed indicator values, used calculate contributions. type_col Column name column type data. source_col Column name column store source information. source Source use prevent data flat extrapolated one unique value. ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes(). extrapolate_to Year extrapolate Prevent data , defaults 2025","code":""},{"path":"/reference/transform_prev_cmpgn_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform Prevent campaigns data — transform_prev_cmpgn_data","text":"transform values flat extrapolated latest year specific year, default 2023 latest year values provided specific pathogen, years used calculating rolling average , otherwise, latest year observed values used.","code":""},{"path":"/reference/transform_prev_routine_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Prevent routine data — transform_prev_routine_data","title":"Transform Prevent routine data — transform_prev_routine_data","text":"Prevent routine data now stored raw using percent coverage indicator. want transform back numerator value use within pathogen_calc.","code":""},{"path":"/reference/transform_prev_routine_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Prevent routine data — transform_prev_routine_data","text":"","code":"transform_prev_routine_data(   df,   iso3,   year,   ind,   value,   transform_value,   type_col,   ind_ids )"},{"path":"/reference/transform_prev_routine_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Prevent routine data — transform_prev_routine_data","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. iso3 Column name column country ISO3 codes. year Column name column year data. ind Column name column indicator names. value Column name column indicator values. transform_value Column name column(s) transformed indicator values, used calculate contributions. type_col Column name column type data. ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes().","code":""},{"path":"/reference/transform_road_safety.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform road safety data — transform_road_safety","title":"Transform road safety data — transform_road_safety","text":"Rescales road safety data using SDI ratio according Billions methods report","code":""},{"path":"/reference/transform_road_safety.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform road safety data — transform_road_safety","text":"","code":"transform_road_safety(x, iso3)"},{"path":"/reference/transform_road_safety.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform road safety data — transform_road_safety","text":"x Indicator value. iso3 Country ISO3 code.","code":""},{"path":"/reference/transform_suicide_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform suicide rate data — transform_suicide_rate","title":"Transform suicide rate data — transform_suicide_rate","text":"Rescales suicide rate data according Billions methods report","code":""},{"path":"/reference/transform_suicide_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform suicide rate data — transform_suicide_rate","text":"","code":"transform_suicide_rate(x)"},{"path":"/reference/transform_suicide_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform suicide rate data — transform_suicide_rate","text":"x Indicator value.","code":""},{"path":"/reference/transform_transfats.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform transfats policy data — transform_transfats","title":"Transform transfats policy data — transform_transfats","text":"Rescales transfats policy data according Billions methods report","code":""},{"path":"/reference/transform_transfats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform transfats policy data — transform_transfats","text":"","code":"transform_transfats(x)"},{"path":"/reference/transform_transfats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform transfats policy data — transform_transfats","text":"x Indicator value.","code":""},{"path":"/reference/transform_uhc_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Raw Indicator Values for UHC Billion — transform_uhc_data","title":"Transform Raw Indicator Values for UHC Billion — transform_uhc_data","text":"transform_uhc_data() applies transformations UHC Billion indicators transformed indicator values can used within Billions calculations. Details specific transformations applied can found within Billions methods report. Values transform column, already exists, replaced UHC indicators data value column, otherwise column keeps original data.","code":""},{"path":"/reference/transform_uhc_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Raw Indicator Values for UHC Billion — transform_uhc_data","text":"","code":"transform_uhc_data(   df,   ind = \"ind\",   value = \"value\",   transform_glue = \"transform_{value}\",   ind_ids = billion_ind_codes(\"uhc\") )"},{"path":"/reference/transform_uhc_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Raw Indicator Values for UHC Billion — transform_uhc_data","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. ind Column name column indicator names. value Column name column indicator values. transform_glue Glue expression passed glue::glue(). Defaults 'transform_{value}' create new column names prefixing transform_ original name. ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes().","code":""},{"path":"/reference/transform_uhc_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Raw Indicator Values for UHC Billion — transform_uhc_data","text":"Data frame long format.","code":""},{"path":"/reference/transform_uhc_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform Raw Indicator Values for UHC Billion — transform_uhc_data","text":"details UHC Billion calculation process function ties rest, see vignette: vignette(\"uhc\", package = \"billionaiRe\")","code":""},{"path":"/reference/transform_uhc_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a transformation on a single column — transform_uhc_single","title":"Perform a transformation on a single column — transform_uhc_single","text":"function used within transform_uhc_data() generate transformed data single column.","code":""},{"path":"/reference/transform_uhc_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a transformation on a single column — transform_uhc_single","text":"","code":"transform_uhc_single(df, ind, value, transform_col, ind_ids)"},{"path":"/reference/transform_uhc_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a transformation on a single column — transform_uhc_single","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. ind Column name column indicator names. value Column name column indicator values. transform_col Column put transformed values ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes().","code":""},{"path":"/reference/transform_uhc_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a transformation on a single column — transform_uhc_single","text":"single column data frame transformed values.","code":""},{"path":"/reference/transform_uhc_tobacco.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform UHC tobacco data — transform_uhc_tobacco","title":"Transform UHC tobacco data — transform_uhc_tobacco","text":"Reverses indicator rescales [29,100] [0,100]","code":""},{"path":"/reference/transform_uhc_tobacco.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform UHC tobacco data — transform_uhc_tobacco","text":"","code":"transform_uhc_tobacco(x)"},{"path":"/reference/transform_uhc_tobacco.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform UHC tobacco data — transform_uhc_tobacco","text":"x Indicator value.","code":""},{"path":"/reference/trim_transforms.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim all transformed data — trim_transforms","title":"Trim all transformed data — trim_transforms","text":"Trims transform data ensure values 0 100","code":""},{"path":"/reference/trim_transforms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim all transformed data — trim_transforms","text":"","code":"trim_transforms(x, min_val = 0, max_val = 100)"},{"path":"/reference/trim_transforms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim all transformed data — trim_transforms","text":"x Indicator value. min_val Minimum possible value transform take max_val Maximum possible value transform take","code":""},{"path":"/reference/uhc_df.html","id":null,"dir":"Reference","previous_headings":"","what":"UHC example data — uhc_df","title":"UHC example data — uhc_df","text":"Fake UHC data used test Billions calculations code within billionaiRe package.","code":""},{"path":"/reference/uhc_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UHC example data — uhc_df","text":"","code":"uhc_df"},{"path":"/reference/uhc_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"UHC example data — uhc_df","text":"data frame 30 rows 5 variables: iso3 Country ISO3 codes. year Year. ind UHC indicator code. value Raw indicator value. type Data type.","code":""},{"path":"/reference/uhc_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"UHC example data — uhc_df","text":"See UHC vignette example use: vignette(\"uhc\", package = \"billionaiRe\")","code":""},{"path":"/reference/untransform_alcohol.html","id":null,"dir":"Reference","previous_headings":"","what":"Untransform alcohol data — untransform_alcohol","title":"Untransform alcohol data — untransform_alcohol","text":"Untransforms alcohol data according Billions methods report","code":""},{"path":"/reference/untransform_alcohol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Untransform alcohol data — untransform_alcohol","text":"","code":"untransform_alcohol(x)"},{"path":"/reference/untransform_alcohol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Untransform alcohol data — untransform_alcohol","text":"x Indicator value.","code":""},{"path":"/reference/untransform_bp.html","id":null,"dir":"Reference","previous_headings":"","what":"Untransform blood pressure data — untransform_bp","title":"Untransform blood pressure data — untransform_bp","text":"Reverses transformation transform_bp()","code":""},{"path":"/reference/untransform_bp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Untransform blood pressure data — untransform_bp","text":"","code":"untransform_bp(x)"},{"path":"/reference/untransform_bp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Untransform blood pressure data — untransform_bp","text":"x Indicator value.","code":""},{"path":"/reference/untransform_glucose.html","id":null,"dir":"Reference","previous_headings":"","what":"Unransform FPG data — untransform_glucose","title":"Unransform FPG data — untransform_glucose","text":"Reverses transformation transform_glucose()","code":""},{"path":"/reference/untransform_glucose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unransform FPG data — untransform_glucose","text":"","code":"untransform_glucose(x)"},{"path":"/reference/untransform_glucose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unransform FPG data — untransform_glucose","text":"x Indicator value.","code":""},{"path":"/reference/untransform_hosp_beds.html","id":null,"dir":"Reference","previous_headings":"","what":"Untransform hospital beds data — untransform_hosp_beds","title":"Untransform hospital beds data — untransform_hosp_beds","text":"Reverses transformation transform_hosp_beds()","code":""},{"path":"/reference/untransform_hosp_beds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Untransform hospital beds data — untransform_hosp_beds","text":"","code":"untransform_hosp_beds(x)"},{"path":"/reference/untransform_hosp_beds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Untransform hospital beds data — untransform_hosp_beds","text":"x Indicator value.","code":""},{"path":"/reference/untransform_hpop_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Untransform Indicator Values for HPOP Billion — untransform_hpop_data","title":"Untransform Indicator Values for HPOP Billion — untransform_hpop_data","text":"untransform_hpop_data() reverses transformations HPOP Billion indicators return raw indicator values. Details specific transformations applied can found within Billions methods report.","code":""},{"path":"/reference/untransform_hpop_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Untransform Indicator Values for HPOP Billion — untransform_hpop_data","text":"","code":"untransform_hpop_data(   df,   iso3 = \"iso3\",   ind = \"ind\",   transform_value = \"transform_value\",   value = stringr::str_remove(transform_value, \"transform_\"),   ind_ids = billion_ind_codes(\"hpop\") )"},{"path":"/reference/untransform_hpop_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Untransform Indicator Values for HPOP Billion — untransform_hpop_data","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. iso3 Column name column country ISO3 codes. ind Column name column indicator names. transform_value Column name(s) column transformed values retrieve. value Column name(s) column place untransformed values. Must length transform_value. column already exists, values overwritten wherever ind transform_value available untransformed Billion, otherwise, column retains values. ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes().","code":""},{"path":"/reference/untransform_hpop_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Untransform Indicator Values for HPOP Billion — untransform_hpop_data","text":"Data frame long format.","code":""},{"path":"/reference/untransform_hpop_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Untransform Indicator Values for HPOP Billion — untransform_hpop_data","text":"details HPOP Billion calculation process function ties rest, see vignette: vignette(\"hpop\", package = \"billionaiRe\")","code":""},{"path":"/reference/untransform_hpop_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a transformation on a single column — untransform_hpop_single","title":"Perform a transformation on a single column — untransform_hpop_single","text":"function used within untransform_hpop_data() generate transformed data single column.","code":""},{"path":"/reference/untransform_hpop_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a transformation on a single column — untransform_hpop_single","text":"","code":"untransform_hpop_single(df, iso3, ind, transform_value, value, ind_ids)"},{"path":"/reference/untransform_hpop_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a transformation on a single column — untransform_hpop_single","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. iso3 Column name column country ISO3 codes. ind Column name column indicator names. transform_value Column name(s) column transformed values retrieve. value Column name(s) column place untransformed values. Must length transform_value. column already exists, values overwritten wherever ind transform_value available untransformed Billion, otherwise, column retains values. ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes().","code":""},{"path":"/reference/untransform_hpop_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a transformation on a single column — untransform_hpop_single","text":"single column data frame transformed values.","code":""},{"path":"/reference/untransform_hwf.html","id":null,"dir":"Reference","previous_headings":"","what":"Untransform health workforce data — untransform_hwf","title":"Untransform health workforce data — untransform_hwf","text":"Reverses transformation transform_hwf()","code":""},{"path":"/reference/untransform_hwf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Untransform health workforce data — untransform_hwf","text":"","code":"untransform_hwf(x)"},{"path":"/reference/untransform_hwf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Untransform health workforce data — untransform_hwf","text":"x Indicator value.","code":""},{"path":"/reference/untransform_road_safety.html","id":null,"dir":"Reference","previous_headings":"","what":"Untransform road safety data — untransform_road_safety","title":"Untransform road safety data — untransform_road_safety","text":"Unscales road safety data using SDI ratio according Billions methods report","code":""},{"path":"/reference/untransform_road_safety.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Untransform road safety data — untransform_road_safety","text":"","code":"untransform_road_safety(x, iso3)"},{"path":"/reference/untransform_road_safety.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Untransform road safety data — untransform_road_safety","text":"x Indicator value. iso3 Country ISO3 code.","code":""},{"path":"/reference/untransform_suicide_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Untransform suicide rate date — untransform_suicide_rate","title":"Untransform suicide rate date — untransform_suicide_rate","text":"Rescales transformed suicide rate date according Billions methods report","code":""},{"path":"/reference/untransform_suicide_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Untransform suicide rate date — untransform_suicide_rate","text":"","code":"untransform_suicide_rate(x)"},{"path":"/reference/untransform_suicide_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Untransform suicide rate date — untransform_suicide_rate","text":"x Indicator value.","code":""},{"path":"/reference/untransform_transfats.html","id":null,"dir":"Reference","previous_headings":"","what":"Untransform transfats policy data — untransform_transfats","title":"Untransform transfats policy data — untransform_transfats","text":"Unscales transfats policy data according Billions methods report","code":""},{"path":"/reference/untransform_transfats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Untransform transfats policy data — untransform_transfats","text":"","code":"untransform_transfats(x)"},{"path":"/reference/untransform_transfats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Untransform transfats policy data — untransform_transfats","text":"x Indicator value.","code":""},{"path":"/reference/untransform_uhc_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Untransform Indicator Values for UHC Billion — untransform_uhc_data","title":"Untransform Indicator Values for UHC Billion — untransform_uhc_data","text":"untransform_uhc_data() reverses transformations UHC Billion indicators return raw indicator values. Details specific transformations applied can found within Billions methods report.","code":""},{"path":"/reference/untransform_uhc_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Untransform Indicator Values for UHC Billion — untransform_uhc_data","text":"","code":"untransform_uhc_data(   df,   ind = \"ind\",   transform_value = \"transform_value\",   value = stringr::str_remove(transform_value, \"transform_\"),   ind_ids = billion_ind_codes(\"uhc\") )"},{"path":"/reference/untransform_uhc_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Untransform Indicator Values for UHC Billion — untransform_uhc_data","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. ind Column name column indicator names. transform_value Column name(s) column transformed values retrieve. value Column name(s) column place untransformed values. Must length transform_value. column already exists, values overwritten wherever ind transform_value available untransformed Billion, otherwise, column retains values. ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes().","code":""},{"path":"/reference/untransform_uhc_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Untransform Indicator Values for UHC Billion — untransform_uhc_data","text":"Data frame long format.","code":""},{"path":"/reference/untransform_uhc_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Untransform Indicator Values for UHC Billion — untransform_uhc_data","text":"details UHC Billion calculation process function ties rest, see vignette: vignette(\"uhc\", package = \"billionaiRe\")","code":""},{"path":"/reference/untransform_uhc_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a transformation on a single column — untransform_uhc_single","title":"Perform a transformation on a single column — untransform_uhc_single","text":"function used within untransform_uhc_data() generate transformed data single column.","code":""},{"path":"/reference/untransform_uhc_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a transformation on a single column — untransform_uhc_single","text":"","code":"untransform_uhc_single(df, ind, transform_value, value, ind_ids)"},{"path":"/reference/untransform_uhc_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a transformation on a single column — untransform_uhc_single","text":"df Data frame long format, 1 row corresponds specific country, year, indicator. ind Column name column indicator names. transform_value Column name(s) column transformed values retrieve. value Column name(s) column place untransformed values. Must length transform_value. column already exists, values overwritten wherever ind transform_value available untransformed Billion, otherwise, column retains values. ind_ids Named vector indicator codes input indicators Billion. Although separate indicator codes can used standard, must supplied named vector names correspond output billion_ind_codes().","code":""},{"path":"/reference/untransform_uhc_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a transformation on a single column — untransform_uhc_single","text":"single column data frame transformed values.","code":""},{"path":"/reference/warning_col_missing_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Warn user when any/all of the row are missing values for the the specified column — warning_col_missing_values","title":"Warn user when any/all of the row are missing values for the the specified column — warning_col_missing_values","text":"Warn user /row missing values specified column","code":""},{"path":"/reference/warning_col_missing_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warn user when any/all of the row are missing values for the the specified column — warning_col_missing_values","text":"","code":"warning_col_missing_values(df, col_name, how)"},{"path":"/reference/warning_col_missing_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Warn user when any/all of the row are missing values for the the specified column — warning_col_missing_values","text":"df Input data frame col_name string specifying name column string specifying whether check /missing values","code":""},{"path":"/reference/wrangle_gho_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Put GHO data into billionaiRe format — wrangle_gho_data","title":"Put GHO data into billionaiRe format — wrangle_gho_data","text":"wrangle_gho_data() takes data returned GHO OData API, obtained using ghost::gho_data(), transforms data ready put xMart database used within billionaiRe package. Currently, providing source type inputs values entire data frame, work multiple indicators loaded GHO data frame.","code":""},{"path":"/reference/wrangle_gho_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Put GHO data into billionaiRe format — wrangle_gho_data","text":"","code":"wrangle_gho_data(df, source = NULL, type = NULL, ind = NULL)"},{"path":"/reference/wrangle_gho_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Put GHO data into billionaiRe format — wrangle_gho_data","text":"df data frame GHO format, returned ghost::gho_data(). source Character string source provided data frame source already available GHO. NULL, source column generated GHO's DataSourceDim column. type Character string type provided data frame. NULL, type column just filled NA_character_. ind Character string indicator provided data frame. NULL, indicator determined applying convert_ind_codes function IndicatorCode field GHO data.","code":""},{"path":"/reference/wrangle_gho_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Put GHO data into billionaiRe format — wrangle_gho_data","text":"data frame.","code":""},{"path":"/reference/wrangle_gho_rural_urban_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrangle GHO data with TOTL/RUR/URB dimensions — wrangle_gho_rural_urban_data","title":"Wrangle GHO data with TOTL/RUR/URB dimensions — wrangle_gho_rural_urban_data","text":"#'wrangle_gho_rural_urban_data() exapnds functionality wrangle_gho_data() also handling indicators TOTL/RUR/URB values Dim1 column GHO data response, first pivoting data frame selecting total, rural, urban values given (iso3, year) combination (order preference).","code":""},{"path":"/reference/wrangle_gho_rural_urban_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrangle GHO data with TOTL/RUR/URB dimensions — wrangle_gho_rural_urban_data","text":"","code":"wrangle_gho_rural_urban_data(   df,   source = NULL,   type = NULL,   ind = NULL,   id_cols = c(\"SpatialDim\", \"TimeDim\"),   names_from = \"Dim1\",   values_from = c(\"NumericValue\", \"High\", \"Low\", \"DataSourceDim\", \"Comments\") )"},{"path":"/reference/wrangle_gho_rural_urban_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrangle GHO data with TOTL/RUR/URB dimensions — wrangle_gho_rural_urban_data","text":"df data frame GHO format, returned ghost::gho_data(). source Character string source provided data frame. NULL, source column generated GHO's DataSourceDim column. NULL, overrides source provided GHO. type Character string type provided data frame. NULL, type column filled NA_character_. ind Character string indicator name provided data frame. required argument raise error provided. RUR URB values available, indicator name _rural _urban appended output data frame. id_cols Character vector columns regardless TOTL/RUR/URB dimension. Used argument name pivot_wider. names_from, values_from pair character vectors used arguments name pivot_wider.","code":""},{"path":"/reference/wrangle_gho_rural_urban_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrangle GHO data with TOTL/RUR/URB dimensions — wrangle_gho_rural_urban_data","text":"data frame","code":""},{"path":"/reference/wrangle_gho_rural_urban_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wrangle GHO data with TOTL/RUR/URB dimensions — wrangle_gho_rural_urban_data","text":"also automatically filters 'mixed' time series — .e., instances time series given country contains combination TOTL, RUR, URB values keeping time series associated commonly occuring options. example, time series URB data 2000 2015 TOTL data 2016 2020 cutoff 2015, URB data kept.","code":""},{"path":"/reference/wrangle_gho_rural_urban_data.html","id":"todo","dir":"Reference","previous_headings":"","what":"TODO","title":"Wrangle GHO data with TOTL/RUR/URB dimensions — wrangle_gho_rural_urban_data","text":"Convert generic unspool_gho_dim function can work DimType, just TOTL/RUR/URB. Re-write make work better wrangle_gho_data avoid significant amount redundant logic. means , eventually, users may gho_data(.) %>% unspool_gho_dim(.) %>% wrangle_gho_data(.)","code":""},{"path":"/reference/wrangle_unsd_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Put UNSD data into billionaiRe format — wrangle_unsd_data","title":"Put UNSD data into billionaiRe format — wrangle_unsd_data","text":"wrangle_unsd_data() takes data returned UNSD API, obtained using goalie::sdg_data(), transforms data ready put xMart database used within billionaiRe package. Currently, providing source type inputs values entire data frame, work multiple indicators loaded SDG data frame. well, UNSD series code kept data frame indicators_df contains UNSD codes can convert two.","code":""},{"path":"/reference/wrangle_unsd_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Put UNSD data into billionaiRe format — wrangle_unsd_data","text":"","code":"wrangle_unsd_data(df, source = NULL, type = NULL)"},{"path":"/reference/wrangle_unsd_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Put UNSD data into billionaiRe format — wrangle_unsd_data","text":"df data frame UNSD format, returned goalie::sdg_data(). source Character string source provided data frame source already available UNSD database. NULL, source column generated UNSD's Source column. type Character string type provided data frame. NULL, type column generated UNSD's Nature column. \"C\" \"CA\" turned \"reported\", \"E\" \"M\" \"estimated\".","code":""},{"path":"/reference/wrangle_unsd_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Put UNSD data into billionaiRe format — wrangle_unsd_data","text":"data frame.","code":""},{"path":"/reference/xmart_col_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the col_types for xMart columns — xmart_col_types","title":"Get the col_types for xMart columns — xmart_col_types","text":"helper function specifying column types reading/writing Triple Billions csv files.","code":""},{"path":"/reference/xmart_col_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the col_types for xMart columns — xmart_col_types","text":"","code":"xmart_col_types()"},{"path":"/reference/xmart_col_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the col_types for xMart columns — xmart_col_types","text":"list column specifications","code":""},{"path":"/reference/xmart_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Get names of xMart4 columns — xmart_cols","title":"Get names of xMart4 columns — xmart_cols","text":"Returns character vector names columns expected Triple Billions xMart tables.","code":""},{"path":"/reference/xmart_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get names of xMart4 columns — xmart_cols","text":"","code":"xmart_cols()"},{"path":"/reference/xmart_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get names of xMart4 columns — xmart_cols","text":"character vector","code":""},{"path":"/news/index.html","id":"billionaire-053","dir":"Changelog","previous_headings":"","what":"billionaiRe 0.5.3","title":"billionaiRe 0.5.3","text":"Export functions introduced version 0.5.0 moved code new package: rapporteur. reduces size billionaiRe package maintain better logic package environment. Introduce basic testing (input-output) package.","code":""},{"path":"/news/index.html","id":"billionaire-052","dir":"Changelog","previous_headings":"","what":"billionaiRe 0.5.2","title":"billionaiRe 0.5.2","text":"Added definitions indicator_df.xlsx Renamed column analysis_code ind indicator_df.xlsx. Removed column ind indicator_df.xlsx. Modified code use ind instead analysis_code.","code":""},{"path":"/news/index.html","id":"billionaire-051","dir":"Changelog","previous_headings":"","what":"billionaiRe 0.5.1","title":"billionaiRe 0.5.1","text":"Combined indicator_df.xlsx indicator_order.xlsx one file. Updated dashboard_id better align current dashboard backend. Changes DESCRIPTION reflecting wppdistro transfer WorldHealthOrganization GitHub org.","code":""},{"path":"/news/index.html","id":"billionaire-050","dir":"Changelog","previous_headings":"","what":"billionaiRe 0.5.0","title":"billionaiRe 0.5.0","text":"Added export_all_countries_summaries_xls export country summary Excel files billions specific billion. Added export_country_summary_xls export one country summary Excel file billions specific billion. Added support functions two preceding functions. Modified indicator_df, indicator_df.xlsx, indicator_df.rda include additional information indicators definition, names, etc. Added indicator_order.xlsx joined indicator_df. Added affected_pathogens, affected_pathogens.xlsx, affected_pathogens.rda indicate pathogens countries affected. Added inst/extdata/country_summary_template.xlsx store Excel template country profiles. Modified default values 2025 instead 2023. Added pre-commit hooks style ensure consistency code commit. See pre-commit repository information.","code":""},{"path":"/news/index.html","id":"billionaire-044","dir":"Changelog","previous_headings":"","what":"billionaiRe 0.4.4","title":"billionaiRe 0.4.4","text":"Added calculate_contribution_sums ability calculate regional global sums HEP, HPOP, UHC billions given year.","code":""},{"path":"/news/index.html","id":"billionaire-043","dir":"Changelog","previous_headings":"","what":"billionaiRe 0.4.3","title":"billionaiRe 0.4.3","text":"Added wrangled_rural_urban_gho_data() functionality supplant wrangle_gho_data() indicators data additional RESIDENCEAREATYPE dimension possible values TOTL, URB RUR. Added xmart_cols(), has_xmart_cols(), save_wrangled_output() utility functions easier wrangling data updates. Full Billions data table added load_billion_data(), allowing user directly download latest Billions data resultant calculations.","code":""},{"path":"/news/index.html","id":"billionaire-042","dir":"Changelog","previous_headings":"","what":"billionaiRe 0.4.2","title":"billionaiRe 0.4.2","text":"Updated indicator_df.xlsx indicator_df.rda GHO code polio_routine(WHS4_544). Billions calculations now return contribution_percent well contribution values, use dashboard presentations. HPOP Billion calculation returns total Billion without double counting correction, well standard.","code":""},{"path":"/news/index.html","id":"billionaire-041","dir":"Changelog","previous_headings":"","what":"billionaiRe 0.4.1","title":"billionaiRe 0.4.1","text":"Updated wrangle_who_data function additional assertions warnings Updated indicator_df.xlsx indicator_df.rda GHO code measles_routine (WHS8_110)","code":""},{"path":"/news/index.html","id":"billionaire-040","dir":"Changelog","previous_headings":"","what":"billionaiRe 0.4.0","title":"billionaiRe 0.4.0","text":"Updated three Billions functions produce data long format immediate upload xMart. Developed three Billions calculated various scenarios, defined long format scenario column wide format multiple value columns. Expanded HEP Billion allow use ebola, COVID, measles campaign data within Prevent indicator.","code":""},{"path":"/news/index.html","id":"billionaire-030","dir":"Changelog","previous_headings":"","what":"billionaiRe 0.3.0","title":"billionaiRe 0.3.0","text":"Updated data loading functions 3 xMart databases available: unprojected data, projected data, final input data Billions. Added untransform_hpop_data() untransform_uhc_data() transformed data converted back original domain raw data. Allow multiple columns transformed untransformed using transform_... untransform_... functions UHC HPOP Billions. Clear error messages added non-distinct rows df ind, iso3, year.","code":""},{"path":"/news/index.html","id":"billionaire-021","dir":"Changelog","previous_headings":"","what":"billionaiRe 0.2.1","title":"billionaiRe 0.2.1","text":"Changed transform_glucose() domain 5.1 7.4, previously one 5.1 7.4. Fixed pop_links ensure IPV double counting correction correct","code":""},{"path":"/news/index.html","id":"billionaire-020","dir":"Changelog","previous_headings":"","what":"billionaiRe 0.2.0","title":"billionaiRe 0.2.0","text":"Added NEWS.md file track changes package. Implemented HEP Billions pipeline.","code":""},{"path":"/news/index.html","id":"billionaire-010","dir":"Changelog","previous_headings":"","what":"billionaiRe 0.1.0","title":"billionaiRe 0.1.0","text":"Initial release package. UHC HPOP Billions available calculation billionaiRe API.","code":""}]
